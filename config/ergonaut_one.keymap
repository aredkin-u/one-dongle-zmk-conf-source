#include "keys_ru.h"
#include <dt-bindings/zmk/input_transform.h>
#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        cap_sen: cap_sen {
            compatible = "zmk,behavior-hold-tap";
            label = "CAP_SEN";
            bindings = <&mo>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            hold-while-undecided;
        };
    };

    combos {
        compatible = "zmk,combos";

        cmben {
            bindings = <&layer_en>;
            key-positions = <3 4>;
            layers = <1>;
        };

        cmbru {
            bindings = <&layer_ru>;
            key-positions = <3 4>;
            layers = <0>;
        };

        LRPar {
            bindings = <&LR_Par>;
            key-positions = <8 9>;
        };

        lr_brc {
            bindings = <&LR_brc>;
            key-positions = <18 19>;
        };

        lr_brs {
            bindings = <&LR_brs>;
            key-positions = <20 21>;
        };

        lr_uDQT {
            bindings = <&LR_ruDKT>;
            key-positions = <6 7>;
            layers = <1 4>;
        };

        lr_enDQT {
            bindings = <&LR_enDKT>;
            key-positions = <6 7>;
            layers = <0 3>;
        };

        boot_l {
            bindings = <&boot_lo>;
            key-positions = <0 12>;
            layers = <3>;
        };
    };

    macros {
        to_ru: to_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(N2))>;
            label = "TO_RU";
            wait-ms = <0>;
            tap-ms = <30>;
        };

        to_en: to_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(N1))>;
            label = "TO_EN";
            wait-ms = <0>;
            tap-ms = <30>;
        };

        layer_en: layer_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &to_en>;
            label = "LAYER_EN";
            wait-ms = <0>;
            tap-ms = <30>;
        };

        layer_ru: layer_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 1 &to_ru>;
            label = "LAYER_RU";
            tap-ms = <30>;
            wait-ms = <0>;
        };

        en: en {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&to_en>,
                <&macro_wait_time 5>,
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&to_ru>;

            label = "EN";
            wait-ms = <0>;
            tap-ms = <30>;
        };

        LR_Par: LR_Par {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT_ARROW>;
            label = "LR_PAR";
        };

        LR_brc: LR_brc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp RBKT &kp LEFT_ARROW>;
            label = "LR_BRC";
        };

        LR_brs: LR_brs {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT_ARROW>;
            label = "LR_BRS";
        };

        LR_ruDKT: LR_ruDKT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RU_DOUBLE_QUOTES &kp RU_DOUBLE_QUOTES &kp LEFT_ARROW>;
            label = "LR_RUDKT";
        };

        LR_enDKT: LR_enDKT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp DQT &kp LEFT_ARROW>;
            label = "LR_ENDKT";
        };

        boot_lo: bootl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bootloader>;
            label = "BOOTL";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        en {
            bindings = <
&kp ESC           &kp Q    &kp W  &kp E    &kp R      &kp T         &kp Y         &kp U        &kp I     &kp O  &kp P    &none
&mt CAPSLOCK TAB  &kp A    &kp S  &kp D    &kp F      &mt LSHIFT G  &mt RSHIFT H  &kp J        &kp K     &kp L  &none    &kp BSLH
&kp LALT          &lt 8 Z  &kp X  &kp C    &kp V      &lt 7 B       &lt 2 N       &kp M        &none     &none  &kp DOT  &kp COMMA
                                  &kp DEL  &kp LCTRL  &kp SPACE     &lt 3 SPACE   &lt 5 ENTER  &kp BSPC
            >;

            display-name = "Base";
        };

        ru {
            display-name = "Ru";
            bindings = <
&kp ESC           &kp RU_CYRILLIC_SHORT_I  &kp RU_CYRILLIC_TSE   &kp RU_CYRILLIC_U   &kp RU_CYRILLIC_KA  &mt RU_CYRILLIC_IO RU_CYRILLIC_IE  &kp RU_CYRILLIC_EN         &kp RU_CYRILLIC_GHE                              &kp RU_CYRILLIC_SHA  &kp RU_CYRILLIC_SHCHA  &kp RU_CYRILLIC_ZE   &kp RU_CYRILLIC_HA
&mt CAPSLOCK TAB  &kp RU_CYRILLIC_EF       &kp RU_CYRILLIC_YERU  &kp RU_CYRILLIC_VE  &kp RU_CYRILLIC_A   &mt LSHIFT RU_CYRILLIC_PE          &mt RSHIFT RU_CYRILLIC_ER  &kp RU_CYRILLIC_O                                &kp RU_CYRILLIC_EL   &kp RU_CYRILLIC_DE     &kp RU_CYRILLIC_ZHE  &kp RU_CYRILLIC_E
&kp LALT          &lt 8 RU_CYRILLIC_YA     &kp RU_CYRILLIC_CHE   &kp RU_CYRILLIC_ES  &kp RU_CYRILLIC_EM  &lt 6 RU_CYRILLIC_I                &lt 2 RU_CYRILLIC_TE       &mt RU_CYRILLIC_HARD_SIGN RU_CYRILLIC_SOFT_SIGN  &kp RU_CYRILLIC_BE   &kp RU_CYRILLIC_YU     &kp RU_DOT           &kp RU_COMMA
                                                                 &kp DEL             &kp LEFT_CONTROL    &kp SPACE                          &lt 4 SPACE                &kp ENTER                                        &kp BSPC
            >;
        };

        nav {
            bindings = <
&none  &none  &kp C_VOLUME_UP    &kp UP            &kp PG_UP  &kp HOME  &none   &none   &none   &none  &none  &none
&none  &none  &kp LEFT           &kp DOWN          &kp RIGHT  &kp INS   &none   &none   &none   &none  &none  &none
&none  &none  &kp C_VOLUME_DOWN  &kp C_PLAY_PAUSE  &kp PG_DN  &kp END   &none   &none   &none   &none  &none  &none
                                 &trans            &trans     &trans    &trans  &trans  &trans
            >;

            display-name = "Navigation";
        };

        sym_en {
            bindings = <
&trans  &kp AT     &kp HASH   &kp PRCNT  &kp CARET  &kp AMPS  &kp LT            &kp GT             &kp LPAR   &kp RPAR   &kp PLUS   &kp MINUS
&trans  &kp TILDE  &kp GRAVE  &kp SQT    &kp DQT    &kp DLLR  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LBRC   &kp RBRC   &kp ASTRK  &kp FSLH
&trans  &kp BSLH   &kp PIPE   &kp FSLH   &kp EXCL   &kp SEMI  &kp COLON         &kp QUESTION       &kp UNDER  &kp EQUAL  &kp DOT    &kp COMMA
                              &trans     &trans     &trans    &trans            &mo 5              &trans
            >;

            display-name = "Symbols";
        };

        sym_ru {
            display-name = "Symbols";
            bindings = <
&trans         &en AT            &en HASH   &kp PRCNT    &en CARET             &en AMPS     &en LT            &en GT             &kp LPAR   &kp RPAR   &kp PLUS    &kp MINUS
&none          &en TILDE         &en GRAVE  &en SQT      &kp RU_DOUBLE_QUOTES  &en DLLR     &en LEFT_BRACKET  &en RIGHT_BRACKET  &en LBRC   &en RBRC   &kp STAR    &kp RU_FSLH
&kp RU_NUMERO  &kp RU_BACKSLASH  &en PIPE   &kp RU_FSLH  &kp EXCL              &kp RU_SEMI  &kp RU_COLON      &kp RU_QUESTION    &kp UNDER  &kp EQUAL  &kp RU_DOT  &kp RU_COMMA
                                            &trans       &trans                &trans       &trans            &mo 5              &trans
            >;
        };

        adj {
            bindings = <
&bootloader  &none  &kp F1  &kp F2   &kp F3   &kp F4   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2      &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
&none        &none  &kp F5  &kp F6   &kp F7   &kp F8   &out OUT_BLE  &kp C_VOL_DN  &kp K_MUTE        &kp C_VOL_UP  &none         &studio_unlock
&none        &none  &kp F9  &kp F10  &kp F11  &kp F12  &out OUT_USB  &kp K_PREV    &kp K_PLAY_PAUSE  &kp K_NEXT    &none         &none
                            &none    &none    &none    &none         &none         &none
            >;

            display-name = "Adjust";
        };

        num_ru {
            display-name = "num";
            bindings = <
&none  &none  &none  &none   &none   &none   &kp N7        &kp NUMBER_8  &kp N9        &kp N0     &kp PLUS    &kp RU_MINUS
&none  &none  &none  &none   &none   &none   &kp NUMBER_4  &kp N5        &kp NUMBER_6  &none      &kp STAR    &kp RU_FSLH
&none  &none  &none  &none   &none   &none   &kp N1        &kp N2        &kp N3        &kp EQUAL  &kp RU_DOT  &kp RU_COMMA
                     &trans  &trans  &trans  &trans        &trans        &trans
            >;
        };

        num_en {
            display-name = "num";
            bindings = <
&none  &none  &none  &none   &none   &none   &kp N7        &kp NUMBER_8  &kp N9        &kp N0     &kp PLUS  &kp MINUS
&none  &none  &none  &none   &none   &none   &kp NUMBER_4  &kp N5        &kp NUMBER_6  &none      &kp STAR  &kp FSLH
&none  &none  &none  &none   &none   &none   &kp N1        &kp N2        &kp N3        &kp EQUAL  &kp DOT   &kp COMMA
                     &trans  &trans  &trans  &trans        &trans        &trans
            >;
        };

        F_keys {
            bindings = <
&none  &none  &none  &none   &none   &none   &kp F1  &kp F2   &kp F3   &kp F4   &none  &none
&none  &none  &none  &none   &none   &none   &kp F5  &kp F6   &kp F7   &kp F8   &none  &none
&none  &none  &none  &none   &none   &none   &kp F9  &kp F10  &kp F11  &kp F12  &none  &none
                     &trans  &trans  &trans  &trans  &trans   &trans
            >;
        };
    };
};
